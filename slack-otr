#!/usr/bin/env python

import os
import datetime
import click

from utils import slack


# @click.group()
# @click.option("--debug", default=False)
# TODO: option for a test channel
# TODO: require --for-real for a real sweep
def init(workspace_token, admin_token):
    # The workspace client auto-joins all public channels,
    # but cannot delete other users' messages.
    reader = slack.client_for(workspace_token)

    # The admin user isn't necessarily in all public channels,
    # but can delete any message in a public channel.
    cleaner = slack.client_for(admin_token)

    # Reuse workspace token for logging client.
    slack.logger = slack.client_for(workspace_token)

    # Get all public channels.
    # channels = slack.all_public_channels(reader)
    channels = [slack.get_channel(reader, "#otr-bot-testing")]

    for channel in channels:
        clean_channel(channel, reader, cleaner)

    # slack.post_to(cleaner, "Hello via admin token", channel_name="#otr-bot-testing")
    # slack.post_to(reader, "Hello via workspace token", channel_name="#otr-bot-testing")


# Given a channel API object, delete old messages.
def clean_channel(channel, reader, cleaner):
    # By default, delete messages older than 14 days.
    too_old = datetime.timedelta(days=14)

    # Testing: delete messages older than ~1 minute.
    too_old = datetime.timedelta(minutes=1)

    # Calculating cut-off. May be imprecise without accounting
    # for time zones, but that level of precision isn't important.
    cutoff = datetime.datetime.now() - too_old

    # Fetch old messages.
    messages = slack.public_messages(
        reader,
        channel_id=channel['id'],
        older_than=cutoff
    )
    slack.log("Found %i public messages in #%s older than %s." % (len(messages), channel['name'], too_old))


    for message in messages:
        print("[debug] Deleting message with text: %s" % message['text'])
        response = slack.delete_message(cleaner, channel['id'], message['ts'])
        print("[debug] Response: %s" % response)



if __name__ == '__main__':
    workspace_token = os.environ["SLACK_OTR_WORKSPACE_TOKEN"]
    admin_token = os.environ["SLACK_OTR_ADMIN_TOKEN"]
    init(workspace_token, admin_token)
