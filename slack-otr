#!/usr/bin/env python

import os
import datetime
import click

from utils import slack


# Given a workspace token, and an empowered user token,
# go through all public channels and delete messages
# older than 14 days.
def init(workspace_token, admin_token):
    # The workspace client auto-joins all public channels,
    # but cannot delete other users' messages.
    reader = slack.client_for(workspace_token)

    # The admin user isn't necessarily in all public channels,
    # but can delete any message in a public channel.
    cleaner = slack.client_for(admin_token)

    # Reuse workspace token for logging client.
    slack.logger = slack.client_for(workspace_token)

    # Get all public channels.
    # channels = slack.all_public_channels(reader)
    channels = [slack.get_channel(reader, "#otr-bot-testing")]

    slack.log("Commencing sweep of old messages.")

    for channel in channels:
        clean_channel(channel, reader, cleaner)

    slack.log("That concludes this sweep of old messages.")


# Given a channel API object, delete old messages.
def clean_channel(channel, reader, cleaner):
    # Testing: delete recent messages.
    # too_old = datetime.timedelta(seconds=1)

    # By default, delete messages older than 14 days.
    too_old = datetime.timedelta(days=14)

    # Calculating cut-off. May be imprecise without accounting
    # for time zones, but that level of precision isn't important.
    cutoff = datetime.datetime.now() - too_old

    # Fetch old messages.
    messages = slack.public_messages(
        reader,
        channel_id=channel['id'],
        older_than=cutoff
    )

    # Record the number of parent messages, threaded replies,
    # and errors we encounter during the old message sweep.
    stats = {
        'messages': len(messages),
        'replies': 0,
        'errors': {}
    }

    for message in messages:
        # Delete the parent message.
        print("[debug] Deleting message with text: %s" % message['text'])
        response = slack.delete_message(cleaner, channel['id'], message['ts'])
        # print("[debug] Response: %s" % response)
        if 'error' in response:
            stats['errors'][response['error']] = stats['errors'].get(response['error'], 0) + 1

        # Delete any threaded replies on the message.
        if ('replies' in message) and (len(message['replies']) > 0):
            stats['replies'] += len(message['replies'])
            for reply in message['replies']:
                response = slack.delete_message(cleaner, channel['id'], reply['ts'])
                # print("[debug] Response: %s" % response)
                if 'error' in response:
                    stats['errors'][response['error']] = stats['errors'].get(response['error'], 0) + 1



    slack.log("[#%s] Processed %i messages (and %i replies) older than %s. Errors: %s" % (channel['name'], stats['messages'], stats['replies'], too_old, stats['errors']))


if __name__ == '__main__':
    workspace_token = os.environ["SLACK_OTR_WORKSPACE_TOKEN"]
    admin_token = os.environ["SLACK_OTR_ADMIN_TOKEN"]
    init(workspace_token, admin_token)
